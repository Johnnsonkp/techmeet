"""Rename user table to users

Revision ID: d69fb8971ec8
Revises: 
Create Date: 2025-06-09 00:34:52.604288

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from sqlalchemy import inspect

# revision identifiers, used by Alembic.
revision = 'd69fb8971ec8'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    bind = op.get_bind()
    inspector = inspect(bind)

    # Rename 'user' to 'users' if it exists
    if 'user' in inspector.get_table_names():
        op.rename_table('user', 'users')

    # Rename 'profile' to 'profiles' only if 'profile' exists
    if 'profile' in inspector.get_table_names():
        op.rename_table('profile', 'profiles')
        # Optionally, rename foreign key constraints/indexes if needed
        with op.batch_alter_table('profiles', schema=None) as batch_op:
            batch_op.drop_constraint('profile_ibfk_1', type_='foreignkey')
            batch_op.create_foreign_key('profiles_user_id_fkey', 'users', ['user_id'], ['id'])
        op.drop_table('profile')

    # Optionally, handle users table index
    if 'users' in inspector.get_table_names():
        with op.batch_alter_table('users', schema=None) as batch_op:
            batch_op.drop_index('email')
            batch_op.create_index('email', ['email'], unique=True)

    # Optionally, drop user table if it still exists
    if 'user' in inspector.get_table_names():
        op.drop_table('user')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Revert table renames
    op.rename_table('users', 'user')
    op.rename_table('profiles', 'profile')

    op.create_table('profile',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('job_title', mysql.VARCHAR(length=120), nullable=True),
    sa.Column('skills', mysql.JSON(), nullable=True),
    sa.Column('personality', mysql.JSON(), nullable=True),
    sa.Column('bio', mysql.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='profile_ibfk_1'),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_table('user',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_name', mysql.VARCHAR(length=50), nullable=True),
    sa.Column('last_name', mysql.VARCHAR(length=50), nullable=True),
    sa.Column('email', mysql.VARCHAR(length=120), nullable=False),
    sa.Column('address', mysql.VARCHAR(length=200), nullable=True),
    sa.Column('password', mysql.VARCHAR(length=128), nullable=True),
    sa.Column('is_admin', mysql.TINYINT(display_width=1), autoincrement=False, nullable=False),
    sa.Column('employment_status', mysql.VARCHAR(length=50), nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('updated_at', mysql.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index('email', ['email'], unique=True)

    # ### end Alembic commands ###
