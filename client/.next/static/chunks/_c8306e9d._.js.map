{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/johnnsonkp/holberton-learning/techmeet/client/lib/auth/user.ts"],"sourcesContent":["'use server'\n\nimport { auth, signOut } from './auth'\n\nimport { redirect } from 'next/navigation'\n\n/**\n * Get the currently signed-in user.\n * Works in server components or server actions.\n */\nexport async function currentUser() {\n  const session = await auth()\n  return session?.user || null\n}\n\n/**\n * Get the user's email or token to send to Flask backend.\n * You could customize this to return a JWT or accessToken if using JWT strategy.\n */\nexport async function getToken() {\n  const session = await auth()\n  return session?.user?.email ?? null // or use token if you use JWT strategy\n}\n\n/**\n * Redirects if user is not authenticated.\n * Use this in protected server components or layouts.\n */\nexport async function requireAuth() {\n  const session = await auth()\n  if (!session) {\n    redirect('/auth')\n  }\n}\n\n/**\n * Client-safe logout function.\n * Can be used inside client components.\n */\nexport async function logout() {\n  // Must be called from client\n  await signOut({ redirectTo: '/' })\n}\n\n\nexport const checkIsAuthenticated = async () => {\n  const session = await auth();\n\n  if (session?.user) {\n    return true;\n  }\n  return false;\n};"],"names":[],"mappings":";;;;;;IAuCsB,SAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/johnnsonkp/holberton-learning/techmeet/client/components/ui/authButtons/AuthButtons.tsx"],"sourcesContent":["'use client'\n\nimport { signIn, signOut } from 'next-auth/react'\n\nimport { logout } from '@/lib/auth/user'\n\nexport const SignInButton: any = () => {\n  <button onClick={() => signIn('google')}>Sign in with Google</button>\n}\n\nexport const SignOutButton: any = () => {\n  return (\n    <button \n      className='flex align-middle justify-center p-1 w-4 border-2 bg-red-500 w-[110px] text-white' \n      onClick={() => logout()}>Sign Out</button>\n  )\n}"],"names":[],"mappings":";;;;;AAEA;AAEA;AAJA;;;;AAMO,MAAM,eAAoB;kBAC/B,6LAAC;QAAO,SAAS,IAAM,CAAA,GAAA,wIAAA,CAAA,SAAM,AAAD,EAAE;kBAAW;;;;;;AAC3C;KAFa;AAIN,MAAM,gBAAqB;IAChC,qBACE,6LAAC;QACC,WAAU;QACV,SAAS,IAAM,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD;kBAAK;;;;;;AAE/B;MANa","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/johnnsonkp/holberton-learning/techmeet/client/app/providers.tsx"],"sourcesContent":["  // providers.tsx\n  \"use client\";\n\nimport { SessionProvider } from \"next-auth/react\";\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n    return <SessionProvider>{children}</SessionProvider>;\n  }"],"names":[],"mappings":"AAAE,gBAAgB;;;;;AAGlB;AAFE;;;AAIK,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACjE,qBAAO,6LAAC,wIAAA,CAAA,kBAAe;kBAAE;;;;;;AAC3B;KAFc","debugId":null}}]
}