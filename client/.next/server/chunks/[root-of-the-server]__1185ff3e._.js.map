{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/johnnsonkp/holberton-learning/techmeet/client/lib/auth/authOptions.ts"],"sourcesContent":["import GoogleProvider from \"next-auth/providers/google\";\nimport type { NextAuthConfig } from 'next-auth'\n\nexport const authOptions: NextAuthConfig = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      authorization: {\n        params: {\n          prompt: \"consent\",\n          access_type: \"offline\",\n          response_type: \"code\",\n        }, // Fixed comma added\n      },\n    }), // Correctly closed GoogleProvider\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  callbacks: {\n    async jwt({ token, user, session, trigger }) {\n      if (trigger === \"update\" && session?.name !== token.name) {\n        token.name = session.name;\n        try {\n          // await setName(token.name);\n          await token.name\n        } catch (error) {\n          console.error(\"Failed to set user name:\", error);\n        }\n      }\n\n      if (user) {\n        // await clearStaleTokens(); // Clear stale verification tokens from database after a successful sign in\n        return {\n          ...token,\n          id: user.id,\n        };\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      console.log(\"session callback\", { session, token });\n      return {\n        ...session,\n        user: {\n          ...session.user,\n          id: token.id as string,\n        },\n      };\n    },\n  },\n}; // Correctly closed export\n//--------------------------------"],"names":[],"mappings":";;;AAAA;AAAA;;AAGO,MAAM,cAA8B;IACzC,WAAW;QACT,CAAA,GAAA,uJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,eAAe;gBACb,QAAQ;oBACN,QAAQ;oBACR,aAAa;oBACb,eAAe;gBACjB;YACF;QACF;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE;YACzC,IAAI,YAAY,YAAY,SAAS,SAAS,MAAM,IAAI,EAAE;gBACxD,MAAM,IAAI,GAAG,QAAQ,IAAI;gBACzB,IAAI;oBACF,6BAA6B;oBAC7B,MAAM,MAAM,IAAI;gBAClB,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,4BAA4B;gBAC5C;YACF;YAEA,IAAI,MAAM;gBACR,wGAAwG;gBACxG,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;gBACb;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,GAAG,CAAC,oBAAoB;gBAAE;gBAAS;YAAM;YACjD,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,EAAE;gBACd;YACF;QACF;IACF;AACF,GAAG,0BAA0B;CAC7B,kCAAkC","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///Users/johnnsonkp/holberton-learning/techmeet/client/lib/auth/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth'\nimport { authOptions } from './authOptions'\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth(authOptions)"],"names":[],"mappings":";;;;;;;AAAA;AAAA;AACA;;;AAEO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE,4HAAA,CAAA,cAAW","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/johnnsonkp/holberton-learning/techmeet/client/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["// import {handlers} from '@/lib/auth'\nexport {GET, POST} from '@/lib/auth/auth'"],"names":[],"mappings":"AAAA,sCAAsC;;AACtC","debugId":null}}]
}